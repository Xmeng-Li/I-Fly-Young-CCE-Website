import React, { useRef, useState, useEffect, useCallback } from "react";
import { useTranslation } from "react-i18next";
import { Link } from "react-router-dom";
import Header from "../Header";
import Footer from "../Footer";
import "../../styles/digSvc.css";

import svcTopBk from "./mockup-bk.png";
import topImg from "./mockUp.png";
import illus1 from "./svcImg1.png";
import illus2 from "./svcImg2.png";
import illus3 from "./svcImg3.png";
import mainImg from "./svc-hands.jpg";
import caseImg from "./case-img.png";
import msImg1 from "./mission1.png";
import msImg2 from "./mission2.png";


type ServiceContent = {
  svc: string;
  svcLTitle: string;
  svcLText: string;
  svcMTitle: string;
  svcMText: string;
  svcRTitle: string;
  svcRText: string;
};
type SvcCapability = {
  capTitle: string;
  capText: string;
};
type PastCase = {
  pastCaseCo: string;
  pastCaseTitle: string;
  pastCaseTag1: string;
  pastCaseTag2: string;
  pastCaseTag3: string;
  pastCaseTag4: string;
};

const DigSvc = () => {
  const { t } = useTranslation("digital");
  const svcContent: ServiceContent[] = t("svcContents", { ns: "digital", returnObjects: true });
  const capContent: SvcCapability[] = t("svcCapCon", { ns: "digital", returnObjects: true });
  const caseContent: PastCase[] = t("pastCase", { ns: "digital", returnObjects: true });

  const NumOneIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="54" viewBox="0 0 12 54"    fill="none">
      <path d="M4.75 7H3.625C2.6875 7 1.89062 6.67188 1.23438 6.01562C0.578125 5.35938 0.25 4.5625 0.25 3.625C0.25 2.6875 0.578125 1.89062 1.23438 1.23438C1.89062 0.578125 2.6875 0.25 3.625 0.25H9.25C9.8875 0.25 10.4219 0.465625 10.8531 0.896875C11.2844 1.32812 11.5 1.8625 11.5 2.5V28.375C11.5 29.3125 11.1719 30.1094 10.5156 30.7656C9.85938 31.4219 9.0625 31.75 8.125 31.75C7.1875 31.75 6.39062 31.4219 5.73438 30.7656C5.07812 30.1094 4.75 29.3125 4.75 28.375V7Z" fill="#37ACF4"/>
    </svg>
  );
  const NumTwoIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="54" height="54" viewBox="0 0 54 54" fill="none">
      <mask id="mask0_1171_4276" maskUnits="userSpaceOnUse" x="0" y="0" width="54" height="54">
        <rect width="54" height="54" fill="#D9D9D9"/>
      </mask>
      <g mask="url(#mask0_1171_4276)">
        <path d="M31.5 11.25H21.375C20.4375 11.25 19.6406 11.5781 18.9844 12.2344C18.3281 12.8906 18 13.6875 18 14.625C18 15.5625 18.3281 16.3594 18.9844 17.0156C19.6406 17.6719 20.4375 18 21.375 18H31.5V23.625H21.375C20.4375 23.625 19.6406 23.9531 18.9844 24.6094C18.3281 25.2656 18 26.0625 18 27V39.375C18 40.3125 18.3281 41.1094 18.9844 41.7656C19.6406 42.4219 20.4375 42.75 21.375 42.75H34.875C35.8125 42.75 36.6094 42.4219 37.2656 41.7656C37.9219 41.1094 38.25 40.3125 38.25 39.375C38.25 38.4375 37.9219 37.6406 37.2656 36.9844C36.6094 36.3281 35.8125 36 34.875 36H24.75V30.375H33.75C34.9875 30.375 36.0469 29.9344 36.9281 29.0531C37.8094 28.1719 38.25 27.1125 38.25 25.875V18C38.25 16.125 37.5938 14.5312 36.2812 13.2188C34.9688 11.9062 33.375 11.25 31.5 11.25Z" fill="#37ACF4"/>
      </g>
    </svg>
  );
  const NumThreeIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="54" height="54" viewBox="0 0 54 54" fill="none">
    <mask id="mask0_1171_1534" maskUnits="userSpaceOnUse" x="0" y="0" width="54" height="54">
      <rect width="54" height="54" fill="#D9D9D9"/>
    </mask>
    <g mask="url(#mask0_1171_1534)">
      <path d="M31.5 42.75H21.375C20.4375 42.75 19.6406 42.4219 18.9844 41.7656C18.3281 41.1094 18 40.3125 18 39.375C18 38.4375 18.3281 37.6406 18.9844 36.9844C19.6406 36.3281 20.4375 36 21.375 36H31.5V30.375H23.625C22.6875 30.375 21.8906 30.0469 21.2344 29.3906C20.5781 28.7344 20.25 27.9375 20.25 27C20.25 26.0625 20.5781 25.2656 21.2344 24.6094C21.8906 23.9531 22.6875 23.625 23.625 23.625H31.5V18H21.375C20.4375 18 19.6406 17.6719 18.9844 17.0156C18.3281 16.3594 18 15.5625 18 14.625C18 13.6875 18.3281 12.8906 18.9844 12.2344C19.6406 11.5781 20.4375 11.25 21.375 11.25H31.5C33.375 11.25 34.9688 11.9062 36.2812 13.2188C37.5938 14.5312 38.25 16.125 38.25 18V22.275C38.25 23.5875 37.7906 24.7031 36.8719 25.6219C35.9531 26.5406 34.8375 27 33.525 27C34.8375 27 35.9531 27.4594 36.8719 28.3781C37.7906 29.2969 38.25 30.4125 38.25 31.725V36C38.25 37.875 37.5938 39.4688 36.2812 40.7812C34.9688 42.0938 33.375 42.75 31.5 42.75Z" fill="#37ACF4"/>
    </g>
  </svg>
  );
  const LeftArrow = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
    <mask id="mask0_2033_9305" maskUnits="userSpaceOnUse" x="0" y="0" width="24" height="24">
      <rect width="24" height="24" fill="#D9D9D9"/>
    </mask>
    <g mask="url(#mask0_2033_9305)">
      <path d="M9.46423 11.58L16.1109 18.2266C16.337 18.4527 16.4462 18.7165 16.4387 19.0179C16.4312 19.3193 16.3144 19.5831 16.0883 19.8092C15.8622 20.0352 15.5984 20.1483 15.297 20.1483C14.9956 20.1483 14.7318 20.0352 14.5057 19.8092L7.54258 12.8686C7.36172 12.6877 7.22608 12.4843 7.13565 12.2582C7.04522 12.0321 7 11.806 7 11.58C7 11.3539 7.04522 11.1278 7.13565 10.9017C7.22608 10.6757 7.36172 10.4722 7.54258 10.2913L14.5057 3.32818C14.7318 3.1021 14.9993 2.99283 15.3083 3.00036C15.6173 3.0079 15.8848 3.12471 16.1109 3.35078C16.337 3.57686 16.45 3.84062 16.45 4.14205C16.45 4.44349 16.337 4.70724 16.1109 4.93332L9.46423 11.58Z" fill="white"/>
    </g>
  </svg>
  );
  const RightArrow = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
    <g>
      <mask id="mask0_2033_9306" maskUnits="userSpaceOnUse" x="0" y="0" width="24" height="24">
        <rect width="24" height="24" fill="#D9D9D9"/>
      </mask>
      <g mask="url(#mask0_2033_9306)">
        <path d="M13.9755 11.5918L7.32821 4.94445C7.10211 4.71835 6.99283 4.4508 7.00036 4.1418C7.0079 3.8328 7.12472 3.56525 7.35082 3.33915C7.57692 3.11305 7.84447 3 8.15347 3C8.46247 3 8.73002 3.11305 8.95612 3.33915L15.8974 10.303C16.0782 10.4839 16.2139 10.6874 16.3043 10.9135C16.3948 11.1396 16.44 11.3657 16.44 11.5918C16.44 11.8179 16.3948 12.044 16.3043 12.2701C16.2139 12.4962 16.0782 12.6996 15.8974 12.8805L8.93351 19.8444C8.70741 20.0705 8.44363 20.1798 8.14216 20.1722C7.8407 20.1647 7.57692 20.0479 7.35082 19.8218C7.12472 19.5957 7.01167 19.3281 7.01167 19.0191C7.01167 18.7101 7.12472 18.4426 7.35082 18.2165L13.9755 11.5918Z" fill="white"/>
      </g>
    </g>
  </svg>
  );
  const Circle = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="373" height="98" viewBox="0 0 373 98" fill="none">
    <path d="M85.6717 91.8441C76.2903 90.8423 66.9567 89.6966 57.9213 88.1093C48.8858 86.524 40.1524 84.5068 32.3174 81.8205C24.4785 79.1342 17.5299 75.8371 12.2748 71.97C9.62339 70.0385 7.49272 67.9804 5.87087 65.7941C4.28082 63.6154 3.28703 61.3746 2.88554 59.0695C2.48803 56.7664 2.66294 54.475 3.41424 52.1952C4.16554 49.9155 5.37 47.696 7.02763 45.5349C8.68129 43.3738 10.7245 41.3021 13.1493 39.3219C15.5503 37.3378 18.2892 35.4705 21.362 33.7198C27.6069 30.2107 34.6111 27.1159 42.3864 24.4373C50.1896 21.751 58.3506 19.3526 66.8613 17.246C83.9146 12.9374 101.64 9.44964 120.037 6.77889C129.219 5.45227 138.521 4.33573 147.946 3.42927C157.367 2.52281 166.852 1.85367 176.404 1.41988C195.56 0.528992 214.712 0.542603 233.865 1.46268C236.25 1.57161 238.631 1.72139 241.012 1.85172C243.397 1.9801 245.762 2.16489 248.135 2.32051C250.512 2.47613 252.87 2.69788 255.235 2.88461C257.6 3.06941 259.945 3.31645 262.299 3.53236C271.7 4.45049 280.994 5.58843 290.176 6.94228C291.333 7.0979 292.446 7.29826 293.583 7.47527L295.28 7.7476C295.845 7.83902 296.413 7.93044 296.966 8.03743C299.196 8.44786 301.446 8.83884 303.62 9.30959L305.27 9.6461L306.093 9.81728L306.904 9.99818L310.139 10.7296L310.95 10.9144L311.741 11.1147L313.328 11.5174C314.381 11.7878 315.454 12.0348 316.48 12.3324L319.58 13.1922C320.081 13.3342 320.606 13.4879 321.111 13.6435L322.602 14.1045C324.645 14.6997 326.585 15.3747 328.548 16.0263C329.542 16.3551 330.46 16.713 331.414 17.0553L332.841 17.5747C333.342 17.7478 333.768 17.9385 334.233 18.1174L336.995 19.2164L339.655 20.3719L340.971 20.9516L342.243 21.5585C343.081 21.9669 343.948 22.3618 344.771 22.7761C346.369 23.6281 348.03 24.4548 349.513 25.3555C351.079 26.2191 352.463 27.1587 353.894 28.0729C354.585 28.5417 355.225 29.026 355.885 29.5007L356.883 30.2165L357.789 30.9479C360.258 32.9125 362.353 34.9706 364.07 37.118C364.48 37.6549 364.905 38.1898 365.298 38.7306L366.332 40.3743C366.71 40.9189 366.924 41.4831 367.206 42.0413C367.489 42.5996 367.779 43.152 367.934 43.72L368.51 45.424C368.645 45.9959 368.741 46.5658 368.86 47.1299C368.904 47.4159 368.983 47.6999 369.007 47.9858L369.059 48.8456L369.103 49.7034C369.103 49.9894 369.158 50.2753 369.103 50.5593L368.952 52.2769L368.92 52.7068C368.92 52.8488 368.852 52.9908 368.824 53.1348L368.63 53.9867L368.431 54.8426L368.331 55.2686L368.172 55.6927L367.544 57.383C367.489 57.525 367.445 57.6651 367.381 57.8071L367.167 58.2234L366.733 59.0559L366.304 59.8923L366.089 60.3086L365.823 60.721C365.076 61.8084 364.444 62.9132 363.514 63.9753L362.21 65.5801L360.715 67.144C359.753 68.1847 358.668 69.1904 357.448 70.1649C352.574 74.03 345.741 77.261 338.037 79.8675C330.329 82.4741 321.723 84.4951 312.882 86.1602C303.962 87.8039 294.855 89.1402 285.557 90.1693C276.279 91.2352 266.866 92.0366 257.401 92.7408C252.667 93.0831 247.917 93.3905 243.158 93.6648C238.404 93.9488 233.642 94.2055 228.868 94.4467L214.549 95.1392L207.378 95.4466L200.207 95.6897C190.647 96.0146 181.067 96.1779 171.467 96.1779C161.875 96.1779 152.275 96.0496 142.699 95.7247C133.119 95.3999 123.563 94.9136 114.05 94.2775C104.538 93.6414 95.0768 92.8108 85.6717 91.8441ZM85.5882 92.0366C94.9854 93.0345 104.458 93.869 113.967 94.5693C123.471 95.2715 133.031 95.8298 142.611 96.2635C161.831 97.1039 181.079 97.347 200.358 96.993L207.581 96.8335L214.8 96.6117C219.598 96.4483 224.396 96.2713 229.19 96.0807C233.988 95.8881 238.778 95.678 243.568 95.4466C248.358 95.1976 253.148 94.9175 257.934 94.6062C267.502 93.9838 277.039 93.1824 286.483 92.1358C295.98 91.1146 305.286 89.7783 314.405 88.1249C323.5 86.4306 332.364 84.3337 340.466 81.5987C342.457 80.9062 344.445 80.1826 346.357 79.4065C348.269 78.6284 350.086 77.8173 351.835 76.9711C355.353 75.238 358.413 73.3317 361.017 71.2484C362.297 70.2077 363.438 69.132 364.444 68.0232L365.982 66.3893L367.322 64.7106C368.272 63.6018 368.928 62.4405 369.687 61.3007L369.957 60.8688L370.184 60.4312L371.058 58.6766L371.277 58.2389C371.345 58.0911 371.388 57.9413 371.444 57.7954L372.239 55.5682L372.338 55.1208L372.533 54.2182L372.728 53.3195C372.756 53.1698 372.796 53.02 372.815 52.8683L372.851 52.4189L372.982 50.6079C373.022 50.3084 372.982 50.0069 372.982 49.7054L372.923 48.8009L372.855 47.8983C372.827 47.5948 372.74 47.2953 372.68 46.9957C372.553 46.3966 372.442 45.7955 372.291 45.1964L371.663 43.4146C371.488 42.8155 371.166 42.2358 370.872 41.6484C370.577 41.0629 370.327 40.4735 369.925 39.9036L368.82 38.1782C368.395 37.6121 367.938 37.0558 367.501 36.4917C365.68 34.2528 363.462 32.115 360.838 30.0764L359.88 29.3081L358.835 28.5787C358.131 28.0904 357.455 27.5866 356.728 27.1042C355.233 26.1608 353.767 25.1999 352.129 24.3109C350.571 23.3869 348.853 22.5388 347.148 21.6713C346.289 21.2492 345.387 20.8465 344.508 20.4341L343.181 19.8175L341.793 19.2028L339.027 18.0357L336.157 16.927C335.66 16.7441 335.211 16.5515 334.714 16.3784L333.223 15.8571C332.225 15.5147 331.259 15.1529 330.234 14.8223C328.198 14.1745 326.191 13.5015 324.08 12.9101L322.518 12.453C321.997 12.3013 321.477 12.1476 320.94 12.0095L317.764 11.1634C316.71 10.8716 315.597 10.6284 314.512 10.36L312.882 9.96706L312.063 9.77059L311.233 9.58969L307.909 8.8583L307.079 8.68129L306.232 8.51595L304.542 8.18721C302.304 7.73203 300.007 7.35078 297.721 6.9559C297.157 6.85475 296.576 6.76138 295.996 6.6758L294.259 6.41514C293.102 6.24591 291.949 6.05333 290.773 5.90356C281.499 4.60416 272.109 3.53431 262.613 2.69204C260.24 2.49363 257.87 2.27383 255.489 2.09682C253.108 1.9198 250.727 1.73695 248.338 1.58328C245.945 1.42961 243.564 1.26816 241.167 1.14367C238.774 1.02113 236.381 0.883011 233.98 0.785751C214.744 -0.0565109 195.509 -0.0623474 176.273 0.774086C166.685 1.18452 157.137 1.80309 147.636 2.6298C138.135 3.4565 128.73 4.48746 119.421 5.72459C110.127 6.97147 100.952 8.4323 91.8967 10.1091C82.8414 11.7839 73.9927 13.6785 65.3548 15.791C56.7486 17.9112 48.2418 20.2455 40.3194 23.0135C36.3363 24.3945 32.5202 25.8768 28.871 27.4641C25.2258 29.0591 21.831 30.7709 18.6867 32.5994C15.5106 34.4356 12.6882 36.3944 10.2236 38.4758C7.76303 40.561 5.70391 42.7377 4.05026 45.0058C0.758847 49.5206 -0.743752 54.3991 0.35736 59.1882C0.897978 61.5886 2.07064 63.915 3.87138 66.1636C5.67211 68.3987 7.99757 70.4936 10.8398 72.4524C13.6621 74.3937 16.8502 76.1794 20.4 77.8114C23.9219 79.4415 27.7063 80.914 31.749 82.227C35.7837 83.5303 39.9855 84.6896 44.3541 85.7031C48.7149 86.7107 53.1789 87.5958 57.7424 88.3602C66.8693 89.8697 76.1512 91.0952 85.5882 92.0366Z" fill="#7FC9FA"/>
  </svg>
  );
  const BlueLines = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="391" height="25" viewBox="0 0 391 25" fill="none">
      <path d="M373.226 9.07406C356.814 9.92759 340.436 11.1979 324.003 11.8306C309.734 12.384 295.475 13.1482 281.195 13.7015C264.279 14.3614 247.37 15.1257 230.454 15.6045C214.448 16.0611 198.445 16.6292 182.455 17.5076C164.662 18.4852 146.851 19.1179 129.074 20.4527C116.549 21.3881 103.982 21.7876 91.4413 22.5518C73.0484 23.6733 54.6476 24.3656 36.2202 24.4127C34.6669 24.4127 31.9241 26.1942 31.7143 23.5517C31.4966 20.7778 34.6324 21.8993 36.2627 21.8596C42.5556 21.6884 48.8565 21.7951 55.1494 21.7951C65.566 21.3956 75.9825 21.1127 86.3804 20.5669C100.294 19.8275 114.199 18.9318 128.113 18.1601C137.356 17.6465 146.599 17.19 155.844 16.793C175.381 15.9469 194.911 15.1579 214.448 14.3515C220.967 14.0836 227.485 14.0587 234.004 13.7436C249.428 13.0018 264.879 12.8157 280.311 12.2698C295.621 11.7339 310.934 11.1086 326.226 10.3668C341.504 9.62737 356.787 8.89542 372.039 7.764C377.594 7.34965 383.478 7.85332 388.581 4.86847C389.373 4.41441 390.559 4.22584 390.915 5.24313C391.367 6.54574 389.909 6.77153 389.033 7.02461C383.887 8.4885 378.513 8.81354 373.218 9.08151L373.226 9.07406ZM1.8747 11.6843C0.857739 11.7835 -0.0105245 12.0763 9.64242e-05 13.1159C9.64242e-05 14.2969 1.0675 14.3193 1.99418 14.3044C3.25277 14.2796 4.52197 14.2399 5.76197 14.1084C15.1536 13.1233 24.5292 11.8629 33.9447 11.1806C46.1322 10.2948 58.3437 9.64225 70.5658 9.27008C96.4145 8.48106 122.271 7.82851 148.128 7.33476C164.375 7.02461 180.615 6.52838 196.854 6.11402C214.7 5.65748 232.546 5.07193 250.392 4.86103C271.111 4.60794 291.819 3.51871 311.064 4.12908C329.55 3.02247 346.634 3.96532 363.601 2.21857C364.573 2.11933 365.988 2.42947 365.884 1.00528C365.77 -0.451173 364.469 0.0698744 363.479 0.184008C357.621 0.851445 351.78 1.88361 345.904 2.07963C336.416 2.38729 326.903 2.50143 317.408 2.60812C289.477 2.93315 261.555 3.15398 233.621 3.94299C215.438 4.45411 197.237 4.75433 179.054 5.21087C159.028 5.71455 139.005 6.04951 118.981 6.47875C101.013 6.86085 83.056 7.26032 65.096 7.7243C48.1794 8.16347 31.324 9.24526 14.4605 10.4561C10.2573 10.7588 6.06732 11.2773 1.8747 11.6768V11.6843Z" fill="#7FC9FA"/>
    </svg>
  );
  const BlueArrow = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="90" height="64" viewBox="0 0 90 64" fill="none">
      <path d="M73.6907 27.3254C77.3399 31.8764 81.6424 35.8287 86.5013 39.0219C73.9701 41.8844 60.7907 41.7121 48.3224 38.7263C35.3192 35.6175 22.7202 29.4794 12.7888 20.4618C7.40781 15.5724 2.60403 9.37583 1.99885 1.86347C1.91931 0.875494 0.302375 -0.189966 0.423632 1.31767C0.978429 8.18795 4.65323 14.2445 9.27548 19.161C14.0397 24.2281 19.8319 28.4146 25.8532 31.858C38.0626 38.8407 51.9898 42.7434 66.0643 43.1988C72.9144 43.4218 79.7723 42.7929 86.4714 41.3402C82.0836 47.3747 78.6914 54.0984 76.4563 61.2232C76.2934 61.7473 76.5153 62.3839 76.8975 62.7612C77.173 63.0346 77.7634 63.2655 77.9308 62.7328C80.4256 54.7684 84.3581 47.3466 89.5556 40.8138C89.6172 40.736 89.6571 40.6431 89.6774 40.5424C90.1756 40.1595 89.4857 38.8471 89.1179 38.6301C83.5827 35.3964 78.6555 31.2054 74.6415 26.1994C73.6906 25.0142 72.9395 26.3871 73.6907 27.3254Z" fill="#7FC9FA"/>
    </svg>
  );

  // 6 icons
  
  const CAP_ICONS = [
    (
      <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none">
        <path d="M30.0023 0C46.5661 0 59.9998 13.4292 60 29.9995C60 46.565 46.5662 60 30.0023 60C13.4335 59.9999 0 46.5699 0 29.9995C0.000169435 13.4293 13.4336 8.49318e-05 30.0023 0ZM11.0332 41.2589V44.3742H48.9668V41.2589H11.0332ZM16.8799 13.1293C15.4396 13.1293 14.2693 14.2997 14.2693 15.7402V32.2803C14.2693 32.8355 14.444 33.3463 14.7391 33.7714L11.0379 39.1028H48.9621L45.2609 33.7658C45.5559 33.3457 45.7317 32.8354 45.7317 32.2803V15.7402C45.7317 14.2998 44.5612 13.1296 43.121 13.1293H16.8799ZM42.0005 31.1605H17.9995V16.8608H42.0005V31.1605Z" fill="white"/>
      </svg>
    ),
    (
      <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none">
        <path d="M30 0C30.982 0 31.9643 0.0464416 32.9411 0.145168C33.9178 0.238699 34.8898 0.384524 35.851 0.576773C36.8172 0.769015 37.768 1.00842 38.7082 1.28897C39.6486 1.57474 40.5739 1.9067 41.4778 2.28079C42.387 2.66007 43.2756 3.07585 44.1432 3.54345C45.0056 4.00587 45.8475 4.50999 46.6683 5.05553C47.4839 5.60109 48.268 6.1838 49.0317 6.80729C49.7902 7.43081 50.518 8.09076 51.209 8.78702C51.9051 9.48323 52.5651 10.2109 53.1885 10.9694C53.8119 11.728 54.3943 12.5173 54.945 13.333C55.4905 14.1488 55.9945 14.9906 56.4569 15.8583C56.9193 16.7261 57.3395 17.6098 57.7136 18.5191C58.0877 19.4284 58.4205 20.3533 58.7063 21.2938C58.992 22.2291 59.231 23.1853 59.4233 24.1465C59.6103 25.113 59.7561 26.0795 59.8548 27.0616C59.9484 28.0384 60 29.0157 60 30.0029C60 30.9849 59.9484 31.9617 59.8548 32.9384C59.7561 33.9205 59.6103 34.887 59.4233 35.8535C59.2311 36.8146 58.992 37.7706 58.7063 38.711C58.4205 39.6463 58.0877 40.5716 57.7136 41.4809C57.3395 42.3902 56.9193 43.2739 56.4569 44.1417C55.9945 45.0094 55.4905 45.8512 54.945 46.667C54.3943 47.4827 53.8119 48.272 53.1885 49.0306C52.5651 49.7891 51.9051 50.5168 51.209 51.213C50.518 51.9092 49.7902 52.5692 49.0317 53.1927C48.268 53.8162 47.4839 54.3989 46.6683 54.9445C45.8475 55.49 45.0056 55.9941 44.1432 56.4565C43.2756 56.9241 42.387 57.3399 41.4778 57.7192C40.5739 58.0933 39.6486 58.4253 38.7082 58.711C37.768 58.9916 36.8172 59.231 35.851 59.4232C34.8898 59.6155 33.9178 59.7613 32.9411 59.8548C31.9643 59.9536 30.982 60 30 60C29.0182 60 28.0365 59.9535 27.0599 59.8548C26.0832 59.7613 25.1112 59.6155 24.15 59.4232C23.1838 59.231 22.233 58.9916 21.2927 58.711C20.3525 58.4253 19.4273 58.0932 18.5183 57.7192C17.6143 57.3399 16.7254 56.9241 15.8578 56.4565C14.9902 55.9941 14.1483 55.49 13.3327 54.9445C12.517 54.3989 11.7269 53.8162 10.9683 53.1927C10.2099 52.5692 9.48231 51.9092 8.78617 51.213C8.09525 50.5168 7.43586 49.7891 6.81247 49.0306C6.18907 48.272 5.6015 47.4827 5.05602 46.667C4.51054 45.8513 4.00645 45.0093 3.54408 44.1417C3.08167 43.2739 2.6605 42.3902 2.28641 41.4809C1.90714 40.5716 1.58044 39.6463 1.29469 38.711C1.00896 37.7706 0.769917 36.8147 0.577691 35.8535C0.385454 34.887 0.244844 33.9205 0.146128 32.9384C0.0474208 31.9617 1.02792e-05 30.9849 0 30.0029C0 29.0157 0.04741 28.0385 0.146128 27.0616C0.244844 26.0795 0.385454 25.113 0.577691 24.1465C0.769928 23.1853 1.00894 22.2291 1.29469 21.2938C1.58043 20.3534 1.90716 19.4284 2.28641 18.5191C2.6605 17.6098 3.08167 16.7261 3.54408 15.8583C4.00645 14.9907 4.51054 14.1487 5.05602 13.333C5.6015 12.5173 6.18907 11.728 6.81247 10.9694C7.43586 10.2109 8.09525 9.48322 8.78617 8.78702C9.48231 8.09082 10.2099 7.43076 10.9683 6.80729C11.7269 6.18375 12.517 5.60113 13.3327 5.05553C14.1483 4.51 14.9902 4.00586 15.8578 3.54345C16.7254 3.07586 17.6143 2.66007 18.5183 2.28079C19.4273 1.90675 20.3525 1.5747 21.2927 1.28897C22.233 1.00842 23.1838 0.769006 24.15 0.576773C25.1112 0.384531 26.0832 0.238694 27.0599 0.145168C28.0365 0.0464826 29.0182 5.18223e-06 30 0ZM20.5027 9.94057C20.2689 9.94057 20.0399 9.98149 19.8217 10.075C19.6035 10.1634 19.4113 10.2936 19.245 10.4599C19.084 10.6261 18.9544 10.8185 18.8661 11.0366C18.7777 11.2549 18.7365 11.4838 18.7365 11.7177V48.3087C18.7365 48.5424 18.7827 48.7657 18.8709 48.9838C18.9592 49.2021 19.0846 49.3943 19.2509 49.5606C19.4171 49.7268 19.6094 49.8571 19.8276 49.9454C20.0405 50.0337 20.269 50.0809 20.5027 50.0809H39.4769C39.7159 50.0809 39.9396 50.0341 40.1578 49.9406C40.376 49.8522 40.5735 49.7223 40.7345 49.5509C40.9008 49.3846 41.031 49.1865 41.1193 48.9682C41.2075 48.7449 41.2492 48.516 41.244 48.2823V11.7177C41.244 11.4838 41.2018 11.2549 41.1135 11.0366C41.0252 10.8185 40.8958 10.6261 40.7297 10.4599C40.5686 10.2936 40.376 10.1634 40.1578 10.075C39.9396 9.98149 39.7107 9.94057 39.4769 9.94057H20.5027ZM30 44.3073C30.2544 44.3073 30.5038 44.3538 30.7375 44.4525C30.9765 44.5512 31.1849 44.6915 31.3668 44.8733C31.5485 45.0499 31.6831 45.2632 31.7818 45.4969C31.8805 45.7359 31.9328 45.9808 31.9328 46.2354C31.9327 46.495 31.8804 46.7389 31.7818 46.9778C31.6831 47.2115 31.5485 47.4195 31.3668 47.6013C31.1849 47.7832 30.9765 47.9235 30.7375 48.0222C30.5037 48.1209 30.2545 48.1684 30 48.1684C29.7455 48.1684 29.4963 48.1209 29.2625 48.0222C29.0235 47.9235 28.8151 47.7832 28.6332 47.6013C28.4515 47.4195 28.3117 47.2115 28.2182 46.9778C28.1196 46.7389 28.0673 46.495 28.0672 46.2354C28.0672 45.9808 28.1195 45.7359 28.2182 45.4969C28.3117 45.2632 28.4515 45.0499 28.6332 44.8733C28.8151 44.6915 29.0235 44.5512 29.2625 44.4525C29.4962 44.3538 29.7456 44.3073 30 44.3073ZM39.1125 42.0684H20.8865V14.1855H39.1125V42.0684Z" fill="white"/>
      </svg>
    ),
    (
      <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none">
        <path d="M47.856 18.7328L47.0407 19.5531L40.4485 12.9554L41.2638 12.1401C42.084 11.3197 43.4145 11.3197 44.2297 12.1401L47.856 15.7666C48.6762 16.5869 48.6762 17.9175 47.856 18.7328ZM22.6776 43.9183L16.0854 37.3205L39.7833 13.6257L46.3755 20.2184L22.6776 43.9183ZM11.7489 48.2551L15.1701 38.2359L21.7623 44.8337L11.7489 48.2551ZM30 0C13.4345 0 0 13.4306 0 30.0025C0 46.5694 13.4345 60 30 60C46.5655 60 60 46.5694 60 30.0025C60 13.4306 46.5655 0 30 0Z" fill="white"/>
      </svg>
    ),
    (
      <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none">
        <path d="M30 0C46.4982 0 60 13.4967 60 30C60 46.4982 46.4982 60 30 60C13.4967 60 0 46.4982 0 30C4.87465e-07 13.4967 13.4967 4.87493e-07 30 0ZM25.2229 44.1474C25.283 45.283 25.2976 46.4535 25.2726 47.1039C25.2676 47.1289 25.2679 47.1492 25.2679 47.1742C25.2681 47.4742 25.5135 47.7239 25.8185 47.7239H34.4722C34.4872 47.7239 34.4976 47.7242 34.5126 47.7192C34.8126 47.6991 35.0428 47.4387 35.0228 47.1386C34.9778 46.4982 34.9881 45.3028 35.0481 44.1474H25.2229ZM24.8224 41.0155C24.8724 41.1856 24.9175 41.361 24.9575 41.5361C25.0325 41.8512 25.0975 42.4018 25.1526 43.0471H35.1129C35.1629 42.4118 35.2282 41.8662 35.3033 41.5511C35.3483 41.371 35.393 41.1906 35.443 41.0155H24.8224ZM30.1454 15.7382C27.014 15.7432 24.1777 17.0187 22.1267 19.0745C20.0757 21.1306 18.81 23.9676 18.81 27.0942C18.8101 30.2956 20.3406 32.7315 21.9363 35.2676C22.8617 36.7334 23.8025 38.2344 24.4529 39.9153H27.0435V32.8064C27.0437 32.5014 27.2891 32.2568 27.5941 32.2568C27.8492 32.2568 28.059 32.4269 28.1241 32.662C28.4091 33.5571 28.8196 34.1821 29.2796 34.5323C29.5598 34.7474 29.8552 34.8531 30.1454 34.8531C30.4355 34.853 30.731 34.7473 31.0111 34.5323C31.4712 34.177 31.8863 33.5515 32.1714 32.6413C32.2616 32.3514 32.5717 32.1911 32.8617 32.2811C33.1018 32.3562 33.2522 32.5816 33.2472 32.8167V39.9153H35.8182C36.4635 38.2495 37.4093 36.7337 38.3348 35.2479C39.9305 32.6918 41.4656 30.2205 41.4807 27.0942V27.0792C41.4857 23.9526 40.2207 21.1256 38.1697 19.0745C36.1237 17.0235 33.2866 15.7482 30.1651 15.7382H30.1454ZM32.1461 34.9675C31.9961 35.1325 31.8411 35.2777 31.6761 35.4027C31.201 35.7678 30.6756 35.9533 30.1454 35.9533C29.6151 35.9533 29.0899 35.7679 28.6146 35.4027C28.4496 35.2777 28.2947 35.1325 28.1447 34.9675V39.9153H32.1461V34.9675ZM42.6813 26.3485C42.2312 26.3486 41.8616 26.714 41.8616 27.1692C41.8617 27.6242 42.2313 27.9945 42.6813 27.9946H43.927C44.3821 27.9946 44.7522 27.6243 44.7524 27.1692C44.7524 26.714 44.3822 26.3485 43.927 26.3485H42.6813ZM16.0683 26.0633C15.6131 26.0633 15.2429 26.4335 15.2429 26.8888C15.2429 27.344 15.6131 27.7142 16.0683 27.7142H17.314C17.769 27.7139 18.1338 27.3438 18.1338 26.8888C18.1338 26.4337 17.769 26.0636 17.314 26.0633H16.0683ZM42.8417 19.7743C42.6166 19.3841 42.111 19.2491 41.7209 19.4741L40.645 20.095C40.2501 20.3253 40.1148 20.8305 40.3449 21.2206C40.57 21.6156 41.0756 21.7457 41.4657 21.5208L42.5416 20.8998C42.9365 20.6746 43.0717 20.1693 42.8417 19.7743ZM18.4142 19.2293C18.0241 19.0042 17.5185 19.1391 17.2933 19.5341C17.0682 19.9243 17.2034 20.4299 17.5935 20.655L18.674 21.275C19.0642 21.5001 19.5698 21.3651 19.7949 20.9749C20.0197 20.5798 19.885 20.0794 19.4901 19.8493L18.4142 19.2293ZM37.4991 14.3275C37.1039 14.0974 36.5986 14.2324 36.3735 14.6276L35.7526 15.7025C35.5225 16.0927 35.6576 16.5983 36.0527 16.8234C36.4429 17.0535 36.9485 16.9181 37.1736 16.528L37.7992 15.4474C38.0239 15.0574 37.8888 14.5526 37.4991 14.3275ZM23.8666 14.4822C23.6415 14.0922 23.1362 13.957 22.7411 14.1821C22.351 14.4122 22.216 14.9175 22.4409 15.3077L23.0665 16.3835C23.2917 16.7786 23.797 16.9137 24.1921 16.6837C24.5822 16.4586 24.7174 15.9532 24.4876 15.5581L23.8666 14.4822ZM30.1407 12.2761C29.6855 12.2761 29.3153 12.6463 29.3153 13.1016V14.3425C29.3155 14.7976 29.6856 15.1679 30.1407 15.1679C30.5956 15.1676 30.9659 14.7974 30.9661 14.3425V13.1016C30.9661 12.6465 30.5957 12.2764 30.1407 12.2761Z" fill="white"/>
      </svg>
    ),
    (
      <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none">
        <path d="M29.9972 0C46.5645 0 59.9998 13.4299 60 29.9972C60 46.5646 46.5646 60 29.9972 60C13.4299 59.9998 0 46.5645 0 29.9972C0.000169347 13.43 13.43 0.000169337 29.9972 0ZM14.1509 14.6313C13.3553 14.6313 12.7098 15.2718 12.7098 16.0724V43.9276C12.7098 44.7232 13.3553 45.3687 14.1509 45.3687H45.8491C46.6447 45.3687 47.2902 44.7232 47.2902 43.9276V16.0724C47.2902 15.2718 46.6447 14.6313 45.8491 14.6313H14.1509ZM43.9032 17.9685V36.5721H36.3319L31.2882 28.7015L29.2917 31.8042L32.3493 36.5721H29.5525L24.0781 28.0363L18.6036 36.5721H16.062V17.9685H43.9032ZM38.4692 21.2259C36.8229 21.2259 35.4866 22.5622 35.4866 24.2085C35.4868 25.8546 36.823 27.1901 38.4692 27.1901C40.1152 27.1899 41.4506 25.8545 41.4508 24.2085C41.4508 22.5623 40.1153 21.2261 38.4692 21.2259Z" fill="white"/>
      </svg>
    ),
    (
      <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none">
        <path d="M30 0C46.5685 0 60 13.4315 60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0ZM28.876 39.8916C27.7028 39.8916 26.7083 40.2007 25.8936 40.8193C25.0788 41.4054 24.671 42.4476 24.6709 43.9453C24.6709 45.3781 25.0787 46.421 25.8936 47.0723C26.7083 47.6908 27.7028 48 28.876 48C30.0164 47.9999 30.9939 47.6907 31.8086 47.0723C32.6234 46.421 33.0312 45.3781 33.0312 43.9453C33.0312 42.4476 32.6233 41.4054 31.8086 40.8193C30.9939 40.2008 30.0164 39.8917 28.876 39.8916ZM30.293 12C28.077 12 26.0402 12.2766 24.1826 12.8301C22.649 13.2871 21.2036 13.8553 19.8477 14.5342C19.3689 14.774 19.1879 15.3581 19.4258 15.8379L21.1416 19.2988C21.389 19.798 21.9959 19.9969 22.5 19.7598C23.5859 19.2489 24.6523 18.8284 25.6982 18.4971C27.0344 18.0738 28.3871 17.8613 29.7559 17.8613C31.1246 17.8614 32.184 18.1388 32.9336 18.6924C33.7156 19.2134 34.1064 19.9952 34.1064 21.0371C34.1064 21.7206 33.9601 22.3392 33.667 22.8926C33.4063 23.4462 32.9659 24.0001 32.3467 24.5537C31.76 25.1073 30.9777 25.7426 30 26.459C28.8919 27.2405 27.9959 28.0059 27.3115 28.7549C26.6598 29.5037 26.1869 30.301 25.8936 31.1475C25.6002 31.9941 25.4531 32.9556 25.4531 34.0303V34.7881C25.4531 35.3403 25.9009 35.788 26.4531 35.7881H30.7598C31.312 35.7881 31.7598 35.3404 31.7598 34.7881V34.3721C31.7598 33.6882 31.8419 33.118 32.0049 32.6621C32.2005 32.2063 32.5587 31.7335 33.0801 31.2451C33.6015 30.7567 34.3353 30.171 35.2803 29.4873C36.5513 28.543 37.6106 27.6637 38.458 26.8496C39.3053 26.003 39.9406 25.0911 40.3643 24.1143C40.788 23.1373 41 21.9806 41 20.6455C40.9999 18.1382 40.0543 16.0705 38.1641 14.4424C36.3063 12.8143 33.6825 12 30.293 12Z" fill="white"/>
      </svg>
    )
  ];

  const StarIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
      <mask id="mask0_2122_9859" maskUnits="userSpaceOnUse" x="0" y="0" width="24" height="24">
        <rect width="24" height="24" fill="#D9D9D9"/>
      </mask>
      <g mask="url(#mask0_2122_9859)">
        <path d="M12 17.2752L7.85002 19.7752C7.66668 19.8919 7.47501 19.9419 7.27501 19.9252C7.07501 19.9085 6.90002 19.8419 6.75002 19.7252C6.60001 19.6085 6.48335 19.4627 6.40002 19.2877C6.31668 19.1127 6.30002 18.9169 6.35002 18.7002L7.45002 13.9752L3.77502 10.8002C3.60835 10.6502 3.50418 10.4794 3.46252 10.2877C3.42085 10.096 3.43335 9.90853 3.50002 9.72519C3.56668 9.54186 3.66668 9.39186 3.80002 9.2752C3.93335 9.15853 4.11668 9.08353 4.35002 9.0502L9.20002 8.6252L11.075 4.1752C11.1583 3.9752 11.2875 3.8252 11.4625 3.7252C11.6375 3.6252 11.8167 3.5752 12 3.5752C12.1833 3.5752 12.3625 3.6252 12.5375 3.7252C12.7125 3.8252 12.8417 3.9752 12.925 4.1752L14.8 8.6252L19.65 9.0502C19.8833 9.08353 20.0667 9.15853 20.2 9.2752C20.3333 9.39186 20.4333 9.54186 20.5 9.72519C20.5667 9.90853 20.5792 10.096 20.5375 10.2877C20.4958 10.4794 20.3917 10.6502 20.225 10.8002L16.55 13.9752L17.65 18.7002C17.7 18.9169 17.6833 19.1127 17.6 19.2877C17.5167 19.4627 17.4 19.6085 17.25 19.7252C17.1 19.8419 16.925 19.9085 16.725 19.9252C16.525 19.9419 16.3333 19.8919 16.15 19.7752L12 17.2752Z" fill="#37ACF4"/>
      </g>
    </svg>
  );

  // Handle cases slider
  const statusRef = useRef<HTMLDivElement | null>(null);
  const [, setCurrent] = useState(0);
  const [atStart, setAtStart] = useState(true);
  const [atEnd, setAtEnd] = useState(false);

  const iconHandler = (onActivate: () => void) => ({
    role: "button" as const,
    tabIndex: 0,
    onClick: onActivate,
    "aria-label": undefined as string | undefined, 
  });

  const scrollToIndex = useCallback((idx: number) => {
    const status = statusRef.current;
    if (!status) return;

    const child = status.children[idx] as HTMLElement | undefined;
    if (!child) return;

    status.scrollTo({ left: child.offsetLeft, behavior: "smooth" });
    setCurrent(idx);
  }, []);

  const getNearestIndex = () => {
    const el = statusRef.current;
    if (!el) return 0;
    let bestIdx = 0;
    let bestDist = Infinity;
    for (let i = 0; i < el.children.length; i++) {
      const child = el.children[i] as HTMLElement;
      const dist = Math.abs(child.offsetLeft - el.scrollLeft);
      if (dist < bestDist) { bestDist = dist; bestIdx = i; }
    }
    return bestIdx;
  };

  const goNext = useCallback(() => {
    const el = statusRef.current;
    if (!el) return;
    const total = el.children.length;
    if (!total) return;

    const cur = getNearestIndex();
    const target = Math.min(cur + 1, total - 1); 
    if (target !== cur) scrollToIndex(target);
  }, [scrollToIndex]);

  const goPrev = useCallback(() => {
    const el = statusRef.current;
    if (!el) return;
    const total = el.children.length;
    if (!total) return;

    const cur = getNearestIndex();
    const target = Math.max(cur - 1, 0);
    if (target !== cur) scrollToIndex(target);
  }, [scrollToIndex]);

  const updateEdges = useCallback(() => {
    const element = statusRef.current;
    if (!element) return;
    const maxLeft = element.scrollWidth - element.clientWidth;
    const left = element.scrollLeft;
    setAtStart(left <= 2);
    setAtEnd(left >= maxLeft - 2 || maxLeft <= 2);
  }, []);


  useEffect(() => {
    const status = statusRef.current;
    if (!status) return;

    const onScroll = () => {
      let bestIdx = 0;
      let bestDist = Infinity;
      for (let i = 0; i < status.children.length; i++) {
        const el = status.children[i] as HTMLElement;
        const dist = Math.abs(el.offsetLeft - status.scrollLeft);
        if (dist < bestDist) {
          bestDist = dist;
          bestIdx = i;
        }
      }
      setCurrent(bestIdx);
      updateEdges();
    };

    status.addEventListener("scroll", onScroll, { passive: true });
    updateEdges();
    window.addEventListener("resize", updateEdges);

    return () => {
      status.removeEventListener("scroll", onScroll);
      window.removeEventListener("resize", updateEdges);
    };
  }, [updateEdges]);


  return (
    <div>
      <Header />
      <div className="svc-banner">
        <div className="svc-left-content">
          <div className="svc-title">{t("svcTitle")}</div>
          <span className="blue-line"><BlueLines /></span>
          <div className="svc-sub">{t("svcSub")}</div>
          <div className="svc-blue-sub">{t("svcBlueSub")}</div>
          <div className="svc-text">{t("svcText")}</div>
          <span className="blue-arrow"><BlueArrow /></span>
          <button className="svc-top-btn">
            <a href="https://forms.cloud.microsoft/Pages/ResponsePage.aspx?id=DQSIkWdsW0yxEjajBLZtrQAAAAAAAAAAAANAApSLa8JUOUlLTU9JS1U0TzBFNVAwQlFNTlpSVThGQS4u" target="_blank" rel="noopener noreferrer">
              {t("svcBtn")}
            </a>
          </button>
        </div>
        <div className="mockup-bk">
          <img className="svc-mockUp" src={topImg} alt="mockup" />
          <img className="banner-circle" src={svcTopBk} alt="circle" />
        </div>
      </div>


      {/* Our Work */}
      <div className="svc-top-three">
        <label className="svc-section-label">{svcContent[0].svc}</label>
        <div className="svc-three">
          <div className="each-svc">
            <div className="svc-text-wrap">
              <span className="svc-icon-one"><NumOneIcon /></span>
              <div className="svc-title-one">{svcContent[0].svcLTitle}</div>
              <div className="svc-work-text">{svcContent[0].svcLText}</div>
            </div>
            <img className="svc-work-img" src={illus1} alt="illustration1" />
          </div>
          <div className="each-svc">
            <div className="svc-text-wrap">
              <span className="svc-three-icons"><NumTwoIcon /></span>
              <div className="svc-work-title">{svcContent[0].svcMTitle}</div>
              <div
                className="svc-work-text"
                dangerouslySetInnerHTML={{ __html: svcContent[0].svcMText}}
              />
            </div>
            <img className="svc-work-img" src={illus2} alt="illustration2" />
          </div>
          <div className="each-svc">
            <div className="svc-text-wrap">
              <span className="svc-three-icons"><NumThreeIcon /></span>
              <div className="svc-work-title">{svcContent[0].svcRTitle}</div>
              <div className="svc-work-text">{svcContent[0].svcRText}</div>
            </div>
            <img className="svc-work-illus" src={illus3} alt="illustration3" />
          </div>
        </div>
      </div>

      {/* Main */}
      <div className="digSvc-main">
        <label className="svc-main-label">{t("svcCap")}</label>
        <label className="svc-main-sub">{t("svcCapSub")}</label>
        <div className="cap-wrap">
          {capContent.map((cap, index) => (
            <div key={index} className="cap-card">
              <div className="each-cap-card">
                <div className="cap-icon" aria-hidden="true">
                  {CAP_ICONS[index % CAP_ICONS.length]}
                </div>
                <div className="cap-title">{cap.capTitle}</div>
                <div className="cap-text">{cap.capText}</div>
                {/* add a button in the last card */}
                {index === capContent.length -1 && (
                  <button className="cap-btn">
                    <a href="mailto:ccetech@iflyyoung.com" target="_blank" rel="noopener noreferrer">
                      {t("caseBtmBtn")}
                    </a>
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Our Approach */}
      <div className="svc-why-appr">
        <div className="svc-texts-wrap">
          <div className="svc-why">
            <div className="svc-why-label">{t("whyPickUs")}</div>
            <div className="svc-why-title"><StarIcon />{t("whyPicTitle")}</div>
            <div className="svc-why-text">{t("whyPickText")}</div>
          </div>
          <div className="svc-why">
            <div className="svc-why-label">{t("svcAppr")}</div>
            <div className="svc-why-title"><StarIcon />{t("svcApprT1")}</div>
            <div className="svc-why-text">{t("svcApprText1")}</div>
            <div className="svc-why-title"><StarIcon />{t("svcApprT2")}</div>
            <div className="svc-why-text">{t("svcApprText2")}</div>
          </div>
        </div>
        <img className="svc-main-img" src={mainImg} alt="mainImg" />
      </div>

      {/* Featured Projects */}
      <div className="svc-case-bk">
        <div className="svc-cases">
          <div className="cases-icons">
            <label className="svc-case-label">{t("pastProjs")}</label>
            <span className="arrowIcons">
              <span
                className={`svc-arrow left ${atStart ? "is-disabled" : ""}`}
                {...iconHandler(() => { if (!atStart) goPrev(); })}
                aria-disabled={atStart}
                aria-label={t("prev") as string}
              >
                <LeftArrow />
              </span>
              <span
                className={`svc-arrow right ${atEnd ? "is-disabled" : ""}`}
                {...iconHandler(() => { if (!atEnd) goNext(); })}
                aria-disabled={atEnd}
                aria-label={t("next") as string}
              >
                <RightArrow />
              </span>
            </span>
          </div>
          <div className="svc-case-wrap" ref={statusRef}>
          {(caseContent ?? []).map((c, i) => (
            <div className="svc-each-case" key={i}>
              <Link to="/cce-case-study" onClick={() => window.scrollTo(0, 0)}>
                <img className="svc-case-img" src={caseImg} alt="caseImg" />
              </Link>
              <div className="svc-case-co">{c.pastCaseCo}</div>
              <div className="svc-case-title">
                <Link to="/cce-case-study" onClick={() => window.scrollTo(0, 0)}>
                  {c.pastCaseTitle}
                </Link>
              </div>
              <div className="case-tags">
                <span>{c.pastCaseTag1}</span>
                <span>{c.pastCaseTag2}</span>
                <span>{c.pastCaseTag3}</span>
                <span>{c.pastCaseTag4}</span>
              </div>
            </div>
          ))}
        </div>
        </div>
      </div>

      {/* Our Mission */}
      <div className="svc-mission">
        <label className="svc-why-label">{t("scvMsn")}</label>
        <div className="svc-ms">
          <div className="svc-each-ms">
            <img className="svc-ms-img" src={msImg1} alt="mainImg" />
            <div className="svc-texts-grey">{t("scvMsnText1")}</div>
          </div>
          <div className="svc-each-ms">
            <img className="svc-ms-img" src={msImg2} alt="mainImg" />
            <div className="svc-texts-blue">{t("scvMsnText2")}</div>
          </div>
        </div>
      </div>


      {/* Bottom Part */}
      <div className="svc-btm-wrap">
        <div className="svc-btm">
          <div className="svc-btm-header">
            <label className="svc-btm-title">
              {t("svcBtmTitle")}
            </label>
            <span className="blue-circle"><Circle /></span>
          </div>
          <div className="svc-btm-texts">{t("svcBtmTexts")}</div>
          <button className="svc-btm-btn">
            <a href="https://forms.cloud.microsoft/Pages/ResponsePage.aspx?id=DQSIkWdsW0yxEjajBLZtrQAAAAAAAAAAAANAApSLa8JUOUlLTU9JS1U0TzBFNVAwQlFNTlpSVThGQS4u" target="_blank" rel="noopener noreferrer">
              {t("caseBtmBtn")}
            </a>
          </button>
        </div>
      </div>
      <Footer />
    </div>
  ); 
}

export default DigSvc;